import { useState, useEffect } from "react";
import { supabase } from "./supabaseClient";

export interface Competition {
  id: number;
  name: string;
  created_at: string;
  created_by: string;
  competition_code: string;
}

export function useCompetitions() {
  const [competitions, setCompetitions] = useState<Competition[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);

  // --- Fetch Competitions ---
  // Fetches competitions, potentially filtered by user later if needed
  const fetchCompetitions = async () => {
    // console.log("Fetching competitions..."); // Debug log
    try {
      setIsLoading(true);
      setError(null);
      const { data, error: supabaseError } = await supabase
        .from("competitions")
        .select("id, name, created_at, created_by, competition_code") // Explicitly select needed columns
        .order("created_at", { ascending: false });

      if (supabaseError) {
        console.error("Error fetching competitions:", supabaseError);
        throw supabaseError;
      }
      // console.log("Fetched competitions data:", data); // Debug log
      setCompetitions((data as Competition[]) || []);
    } catch (err) {
      console.error("Caught error in fetchCompetitions:", err);
      setError(
        err instanceof Error
          ? err
          : new Error("An unknown error occurred during fetch")
      );
    } finally {
      setIsLoading(false);
    }
  };

  // --- Create Competition ---
  // Creates a new competition linked to the currently logged-in user
  const createCompetition = async (name: string): Promise<Competition> => {
    // 1. Get the current user's session and ID
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();

    if (authError || !user) {
      console.error("Authentication error or no user logged in:", authError);
      throw new Error("User must be logged in to create a competition.");
    }
    const userId = user.id;

    // 2. Insert the new competition with the name and created_by
    //    The 'competition_code' will be generated by the database default value
    try {
      const { data: newCompetition, error: createError } = await supabase
        .from("competitions")
        .insert([
          {
            name: name,
            created_by: userId, // Link the competition to the creator
            // created_by: userId, // Uncomment/add if you also need to populate this column
          },
        ])
        .select("id, name, created_at, created_by, competition_code") // Select the fields defined in Competition interface
        .single(); // Expecting a single record back

      if (createError) {
        console.error("Error creating competition:", createError);
        throw createError;
      }

      if (!newCompetition) {
        throw new Error("Competition created but no data returned.");
      }

      // 3. Refresh the list to include the new competition

      await fetchCompetitions();

      // 4. Return the newly created competition data
      return newCompetition as Competition;
    } catch (error) {
      console.error("Caught error in createCompetition:", error);
      throw error instanceof Error
        ? error
        : new Error("An unknown error occurred during creation");
    }
  };

  // --- Initial Fetch ---
  useEffect(() => {
    fetchCompetitions();
  }, []);

  // --- Return Hook API ---
  return {
    competitions,
    isLoading,
    error,
    refreshCompetitions: fetchCompetitions,
    createCompetition,
  };
}
